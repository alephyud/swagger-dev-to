{
  "openapi": "3.0.2",
  "info": {
    "title": "DEV API",
    "description": "Access DEV articles, comments and other resources via API\n\n# Authentication\n\n<!-- ReDoc-Inject: <security-definitions> -->",
    "version": "0.5.7",
    "termsOfService": "https://dev.to/terms",
    "contact": {
      "name": "DEV Team",
      "url": "https://dev.to/contact",
      "email": "yo@dev.to"
    },
    "x-logo": {
      "url": "https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-128-1a9016906487b8ba17f2d3d3c28f9d1cb3ae9b45d685cc2711e20f6b3c6730df.png",
      "backgroundColor": "#000",
      "altText": "DEV logo"
    }
  },
  "servers": [
    {
      "url": "https://dev.to/api",
      "description": "Production server"
    }
  ],
  "components": {
    "securitySchemes": {
      "api_key": {
        "type": "apiKey",
        "description": "API Key authentication.\n\nAuthentication for some endpoints, like write operations on the\nArticles API require a DEV API key.\n\n### Getting an API key\n\nTo obtain one, please follow these steps:\n\n  - visit https://dev.to/settings/account\n  - in the \"DEV API Keys\" section create a new key by adding a\n    description and clicking on \"Generate API Key\"\n\n    ![obtain a DEV API Key](https://user-images.githubusercontent.com/146201/64421366-af3f8b00-d0a1-11e9-8ff6-7cc0ca6e854e.png)\n  - You'll see the newly generated key in the same view\n    ![generated DEV API Key](https://user-images.githubusercontent.com/146201/64421367-af3f8b00-d0a1-11e9-9831-73d3bdfdff66.png)\n",
        "name": "api-key",
        "in": "header"
      },
      "oauth2": {
        "type": "oauth2",
        "description": "OAuth2 authentication.\n\nOAuth2 authentication is still in private alpha.\n",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://dev.to/oauth/authorize",
            "tokenUrl": "https://dev.to/oauth/token",
            "refreshUrl": "https://dev.to/oauth/token",
            "scopes": {}
          },
          "clientCredentials": {
            "tokenUrl": "https://dev.to/oauth/token",
            "refreshUrl": "https://dev.to/oauth/token",
            "scopes": {}
          }
        }
      }
    },
    "schemas": {
      "APIError": {
        "type": "object",
        "required": [
          "error",
          "status"
        ],
        "properties": {
          "error": {
            "type": "string"
          },
          "status": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ArticleIndex": {
        "type": "object",
        "required": [
          "type_of",
          "id",
          "title",
          "description",
          "cover_image",
          "published_at",
          "tag_list",
          "slug",
          "path",
          "url",
          "canonical_url",
          "positive_reactions_count",
          "published_timestamp",
          "user"
        ],
        "properties": {
          "type_of": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "cover_image": {
            "type": "string",
            "format": "url"
          },
          "published_at": {
            "type": "string",
            "format": "date-time"
          },
          "tag_list": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "slug": {
            "type": "string"
          },
          "path": {
            "type": "string",
            "format": "path"
          },
          "url": {
            "type": "string",
            "format": "url"
          },
          "canonical_url": {
            "type": "string",
            "format": "url"
          },
          "positive_reactions_count": {
            "type": "integer",
            "format": "int32"
          },
          "published_timestamp": {
            "description": "Crossposting or published date time",
            "type": "string",
            "format": "date-time"
          },
          "user": {
            "type": "object",
            "$ref": "#/components/schemas/ArticleUser"
          },
          "organization": {
            "type": "object",
            "$ref": "#/components/schemas/ArticleOrganization"
          },
          "flare_tag": {
            "type": "object",
            "$ref": "#/components/schemas/ArticleFlareTag"
          }
        }
      },
      "ArticleShow": {
        "type": "object",
        "required": [
          "type_of",
          "id",
          "title",
          "description",
          "cover_image",
          "readable_publish_date",
          "social_image",
          "tag_list",
          "tags",
          "slug",
          "path",
          "url",
          "canonical_url",
          "comments_count",
          "positive_reactions_count",
          "created_at",
          "edited_at",
          "crossposted_at",
          "published_at",
          "last_comment_at",
          "body_html",
          "body_markdown",
          "user"
        ],
        "properties": {
          "type_of": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "cover_image": {
            "type": "string",
            "format": "url"
          },
          "readable_publish_date": {
            "type": "string"
          },
          "social_image": {
            "type": "string",
            "format": "url"
          },
          "tag_list": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "slug": {
            "type": "string"
          },
          "path": {
            "type": "string",
            "format": "path"
          },
          "url": {
            "type": "string",
            "format": "url"
          },
          "canonical_url": {
            "type": "string",
            "format": "url"
          },
          "comments_count": {
            "type": "integer",
            "format": "int32"
          },
          "positive_reactions_count": {
            "type": "integer",
            "format": "int32"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "edited_at": {
            "type": "string",
            "format": "date-time"
          },
          "crossposted_at": {
            "type": "string",
            "format": "date-time"
          },
          "published_at": {
            "type": "string",
            "format": "date-time"
          },
          "last_comment_at": {
            "type": "string",
            "format": "date-time"
          },
          "body_html": {
            "type": "string"
          },
          "body_markdown": {
            "type": "string"
          },
          "user": {
            "type": "object",
            "$ref": "#/components/schemas/ArticleUser"
          }
        }
      },
      "ArticleCreate": {
        "type": "object",
        "properties": {
          "article": {
            "type": "object",
            "required": [
              "title"
            ],
            "properties": {
              "title": {
                "type": "string"
              },
              "body_markdown": {
                "description": "The body of the article.\n\nIt can contain an optional front matter. For example\n\n```markdown\n---\ntitle: Hello, World!\npublished: true\ntags: discuss, help\ndate: 20190701T10:00Z\nseries: Hello series\ncanonical_url: https://example.com/blog/hello\ncover_image: article_published_cover_image\n---\n```\n\n`date`, `series` and `canonical_url` are optional.\n`date` is the publication date-time\n`series` is the name of the series the article belongs to\n`canonical_url` is the canonical URL of the article\n`cover_image` is the main image of the article\n\n*If the markdown contains a front matter, it will take precedence\non the equivalent params given in the JSON payload.*\n",
                "type": "string"
              },
              "published": {
                "description": "True to create a published article, false otherwise. Defaults to false\n",
                "type": "boolean"
              },
              "series": {
                "description": "Article series name.\n\nAll articles belonging to the same series need to have the same name\nin this parameter.\n",
                "type": "string"
              },
              "main_image": {
                "type": "string",
                "format": "url"
              },
              "canonical_url": {
                "type": "string",
                "format": "url"
              },
              "description": {
                "type": "string"
              },
              "tags": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "organization_id": {
                "description": "Only users belonging to an organization can assign the article to it\n",
                "type": "integer",
                "format": "int32"
              }
            }
          }
        }
      },
      "ArticleUpdate": {
        "type": "object",
        "properties": {
          "article": {
            "type": "object",
            "properties": {
              "title": {
                "type": "string"
              },
              "body_markdown": {
                "description": "The body of the article.\n\nIt can contain an optional front matter. For example\n\n```markdown\n---\ntitle: Hello, World!\npublished: true\ntags: discuss, help\ndate: 20190701T10:00Z\nseries: Hello series\ncanonical_url: https://example.com/blog/hello\ncover_image: article_published_cover_image\n---\n```\n\n`date`, `series` and `canonical_url` are optional.\n`date` is the publication date-time\n`series` is the name of the series the article belongs to\n`canonical_url` is the canonical URL of the article\n`cover_image` is the main image of the article\n\n*If the markdown contains a front matter, it will take precedence\non the equivalent params given in the JSON payload.*\n",
                "type": "string"
              },
              "published": {
                "description": "True to create a published article, false otherwise. Defaults to false\n",
                "type": "boolean"
              },
              "series": {
                "description": "Article series name.\n\nAll articles belonging to the same series need to have the same name\nin this parameter.\n\nTo remove an article from a series, the `null` value can be used.\n",
                "type": "string"
              },
              "main_image": {
                "type": "string",
                "format": "url"
              },
              "canonical_url": {
                "type": "string",
                "format": "url"
              },
              "description": {
                "type": "string"
              },
              "tags": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "organization_id": {
                "description": "Only users belonging to an organization can assign the article to it\n",
                "type": "integer",
                "format": "int32"
              }
            }
          }
        }
      },
      "ArticleMe": {
        "type": "object",
        "required": [
          "type_of",
          "id",
          "title",
          "description",
          "cover_image",
          "published",
          "published_at",
          "tag_list",
          "slug",
          "path",
          "url",
          "canonical_url",
          "comments_count",
          "positive_reactions_count",
          "page_views_count",
          "published_timestamp",
          "body_markdown",
          "user"
        ],
        "properties": {
          "type_of": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "cover_image": {
            "type": "string",
            "format": "url"
          },
          "published": {
            "type": "boolean"
          },
          "published_at": {
            "type": "string",
            "format": "date-time"
          },
          "tag_list": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "slug": {
            "type": "string"
          },
          "path": {
            "type": "string",
            "format": "path"
          },
          "url": {
            "type": "string",
            "format": "url"
          },
          "canonical_url": {
            "type": "string",
            "format": "url"
          },
          "comments_count": {
            "type": "integer",
            "format": "int32"
          },
          "positive_reactions_count": {
            "type": "integer",
            "format": "int32"
          },
          "page_views_count": {
            "type": "integer",
            "format": "int32"
          },
          "published_timestamp": {
            "description": "Crossposting or published date time",
            "type": "string",
            "format": "date-time"
          },
          "user": {
            "type": "object",
            "$ref": "#/components/schemas/ArticleUser"
          },
          "organization": {
            "type": "object",
            "$ref": "#/components/schemas/ArticleOrganization"
          },
          "flare_tag": {
            "type": "object",
            "$ref": "#/components/schemas/ArticleFlareTag"
          }
        }
      },
      "ArticleUser": {
        "description": "The article's creator",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "twitter_username": {
            "type": "string"
          },
          "github_username": {
            "type": "string"
          },
          "website_url": {
            "type": "string",
            "format": "url"
          },
          "profile_image": {
            "description": "Profile image (640x640)",
            "type": "string"
          },
          "profile_image_90": {
            "description": "Profile image (90x90)",
            "type": "string"
          }
        }
      },
      "ArticleOrganization": {
        "description": "The organization the article belongs to",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "profile_image": {
            "description": "Profile image (640x640)",
            "type": "string",
            "format": "url"
          },
          "profile_image_90": {
            "description": "Profile image (90x90)",
            "type": "string",
            "format": "url"
          }
        }
      },
      "ArticleFlareTag": {
        "description": "Flare tag of the article",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "bg_color_hex": {
            "description": "Background color (hexadecimal)",
            "type": "string"
          },
          "text_color_hex": {
            "description": "Text color (hexadecimal)",
            "type": "string"
          }
        }
      },
      "WebhookCreate": {
        "description": "Webhook creation payload",
        "type": "object",
        "properties": {
          "webhook_endpoint": {
            "type": "object",
            "required": [
              "source",
              "target_url",
              "events"
            ],
            "properties": {
              "source": {
                "description": "The name of the requester, eg. \"DEV\"",
                "type": "string"
              },
              "target_url": {
                "type": "string",
                "format": "url"
              },
              "events": {
                "description": "An array of events identifiers",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "WebhookShow": {
        "description": "Webhook",
        "type": "object",
        "properties": {
          "type_of": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "source": {
            "description": "The name of the requester, eg. \"DEV\"",
            "type": "string"
          },
          "target_url": {
            "type": "string",
            "format": "url"
          },
          "events": {
            "description": "An array of events identifiers",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "user": {
            "type": "object",
            "$ref": "#/components/schemas/ArticleUser"
          }
        }
      },
      "WebhookIndex": {
        "description": "Webhook",
        "type": "object",
        "properties": {
          "type_of": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "source": {
            "description": "The name of the requester, eg. \"DEV\"",
            "type": "string"
          },
          "target_url": {
            "type": "string",
            "format": "url"
          },
          "events": {
            "description": "An array of events identifiers",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      }
    },
    "examples": {
      "ErrorBadRequest": {
        "value": {
          "error": "bad request",
          "status": 400
        }
      },
      "ErrorNotFound": {
        "value": {
          "error": "not found",
          "status": 404
        }
      },
      "ErrorUnauthorized": {
        "value": {
          "error": "unauthorized",
          "status": 401
        }
      },
      "ErrorUnprocessableEntity": {
        "value": {
          "error": "param is missing or the value is empty: article",
          "status": 422
        }
      },
      "ArticleShow": {
        "value": {
          "type_of": "article",
          "id": 150589,
          "title": "Byte Sized Episode 2: The Creation of Graph Theory ",
          "description": "The full story of Leonhard Euler and the creation of this fundamental computer science principle, delivered in a few minutes.",
          "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--qgutBUrH--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://thepracticaldev.s3.amazonaws.com/i/88e62fzblbluz1dm7xjf.png",
          "readable_publish_date": "Aug  1",
          "social_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--6wSHHfwd--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://thepracticaldev.s3.amazonaws.com/i/88e62fzblbluz1dm7xjf.png",
          "tag_list": "computerscience, graphtheory, bytesized, history",
          "tags": [
            "computerscience",
            "graphtheory",
            "bytesized",
            "history"
          ],
          "slug": "byte-sized-episode-2-the-creation-of-graph-theory-34g1",
          "path": "/bytesized/byte-sized-episode-2-the-creation-of-graph-theory-34g1",
          "url": "https://dev.to/bytesized/byte-sized-episode-2-the-creation-of-graph-theory-34g1",
          "canonical_url": "https://dev.to/bytesized/byte-sized-episode-2-the-creation-of-graph-theory-34g1",
          "comments_count": 19,
          "positive_reactions_count": 276,
          "created_at": "2019-07-31T11:15:06Z",
          "edited_at": null,
          "crossposted_at": null,
          "published_at": "2019-08-01T15:47:54Z",
          "last_comment_at": "2019-08-06T09:12:45Z",
          "body_html": "<p>Today's episode of Byte Sized is about Leonhard Euler and the creation of <a href=\"https://en.wikipedia.org/wiki/Graph_theory\">Graph Theory</a>.</p>\n\n<p>For more about how Graph Theory works, check out this video from BaseCS!</p>...\n",
          "body_markdown": "---\r\ntitle: Byte Sized Episode 2: The Creation of Graph Theory \r\npublished: true\r\ndescription: The full story of Leonhard Euler and the creation of this fundamental computer science principle, delivered in a few minutes.\r\ntags: computerscience, graphtheory, bytesized, history\r\ncover_image: https://thepracticaldev.s3.amazonaws.com/i/88e62fzblbluz1dm7xjf.png\r\nseries: Byte Sized Season 1\r\n---\r\n\r\nToday's episode of Byte Sized is about Leonhard Euler and the creation of [Graph Theory](https://en.wikipedia.org/wiki/Graph_theory).\r\n\r\nFor more about how Graph Theory works, check out this video from BaseCS!...",
          "user": {
            "name": "Vaidehi Joshi",
            "username": "vaidehijoshi",
            "twitter_username": "vaidehijoshi",
            "github_username": "vaidehijoshi",
            "website_url": "http://www.vaidehi.com",
            "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--eDGAYAoK--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/2882/K2evUksb.jpg",
            "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--htZnqMn3--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/2882/K2evUksb.jpg"
          }
        }
      },
      "ArticleCreateTitleBody": {
        "value": {
          "article": {
            "title": "Hello, World!",
            "published": true,
            "body_markdown": "Hello DEV, this is my first post",
            "tags": [
              "discuss",
              "help"
            ],
            "series": "Hello series",
            "canonical_url": "https://example.com/blog/hello"
          }
        }
      },
      "ArticleCreateFrontMatter": {
        "value": {
          "article": {
            "body_markdown": "---\ntitle: Hello, World!\npublished: true\ntags: discuss, help\ndate: 20190701T10:00Z\nseries: Hello series\ncanonical_url: https://example.com/blog/hello\n---\n\nHello DEV, this is my first post\n"
          }
        }
      },
      "ArticleCreateOrganization": {
        "value": {
          "article": {
            "title": "Hello, World!",
            "published": true,
            "body_markdown": "Hello DEV, this is my first post",
            "tags": [
              "discuss",
              "help"
            ],
            "series": "Hello series",
            "canonical_url": "https://example.com/blog/hello",
            "organization_id": 1234
          }
        }
      },
      "WebhookCreate": {
        "value": {
          "webhook_endpoint": {
            "target_url": "https://example.com/webhooks/webhook1",
            "source": "DEV",
            "events": [
              "article_created"
            ]
          }
        }
      },
      "WebhookShow": {
        "value": {
          "type_of": "webhook_endpoint",
          "id": 1,
          "source": "DEV",
          "target_url": "https://example.com/webhooks/webhook1",
          "events": [
            "article_created"
          ],
          "created_at": "2019-09-02T09:47:39.230Z",
          "user": {
            "name": "bob",
            "username": "bob",
            "twitter_username": null,
            "github_username": "bob",
            "website_url": null,
            "profile_image": "...",
            "profile_image_90": "..."
          }
        }
      }
    }
  },
  "paths": {
    "/articles": {
      "get": {
        "summary": "Published articles",
        "description": "This endpoint allows the client to retrieve a list of articles.\n\n\"Articles\" are all the posts that users create on DEV that typically\nshow up in the feed. They can be a blog post, a discussion question,\na help thread etc. but is referred to as article within the code.\n\nBy default it will return featured, published articles ordered\nby descending popularity.\n\nEach page will contain `30` articles.\n\nResponses, according to the combination of params, are cached for 24 hours.\n",
        "tags": [
          "articles"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Pagination page.\n\nThis param can be used in conjuction with all other params\n(except when asking for fresh and rising articles by themselves).\n",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1
          },
          {
            "name": "tag",
            "in": "query",
            "description": "Adding this parameter will return articles that contain the\nrequested tag.\n\nThis param can be used by itself, with `page` or with `top`.\n",
            "schema": {
              "type": "string"
            },
            "example": "discuss"
          },
          {
            "name": "username",
            "in": "query",
            "description": "Adding this parameter will return articles belonging to a User or Organization\nordered by descending `published_at`.\n\nIf `state=all` the number of items returned will be `1000` instead of the default `30`.\n\nThis param can be used by itself or only with `page` and `state`.\n",
            "schema": {
              "type": "string"
            },
            "example": "ben"
          },
          {
            "name": "state",
            "in": "query",
            "description": "Adding this will allow the client to check which articles are fresh or rising.\n\nIf `state=fresh` the server will return published fresh articles.\nIf `state=rising` the server will return published rising articles.\n\nThis param can only be used by itself or with `username` if set to `all`.\n",
            "schema": {
              "type": "string"
            },
            "example": "ben"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Adding this will allow the client to return the most popular articles\nin the last `N` days.\n\n`top` indicates the number of days since publication of the articles\nreturned.\n\nThis param can only be used by itself or with `tag`.\n",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 2
          }
        ],
        "responses": {
          "200": {
            "description": "A list of articles",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ArticleIndex"
                  }
                },
                "examples": {
                  "articles-success": {
                    "summary": "Successful response",
                    "value": [
                      {
                        "type_of": "article",
                        "id": 150589,
                        "title": "Byte Sized Episode 2: The Creation of Graph Theory",
                        "description": "The full story of Leonhard Euler and the creation of this fundamental computer science principle, delivered in a few minutes.",
                        "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--qgutBUrH--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://thepracticaldev.s3.amazonaws.com/i/88e62fzblbluz1dm7xjf.png",
                        "published_at": "2019-08-01T15:47:54.000Z",
                        "tag_list": [
                          "computerscience",
                          "graphtheory",
                          "bytesized",
                          "history"
                        ],
                        "slug": "byte-sized-episode-2-the-creation-of-graph-theory-34g1",
                        "path": "/bytesized/byte-sized-episode-2-the-creation-of-graph-theory-34g1",
                        "url": "https://dev.to/bytesized/byte-sized-episode-2-the-creation-of-graph-theory-34g1",
                        "canonical_url": "https://dev.to/bytesized/byte-sized-episode-2-the-creation-of-graph-theory-34g1",
                        "comments_count": 15,
                        "positive_reactions_count": 210,
                        "published_timestamp": "2019-08-01T15:47:54Z",
                        "user": {
                          "name": "Vaidehi Joshi",
                          "username": "vaidehijoshi",
                          "twitter_username": "vaidehijoshi",
                          "github_username": "vaidehijoshi",
                          "website_url": "http://www.vaidehi.com",
                          "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--eDGAYAoK--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/2882/K2evUksb.jpg",
                          "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--htZnqMn3--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/2882/K2evUksb.jpg"
                        },
                        "organization": {
                          "name": "Byte Sized",
                          "username": "bytesized",
                          "slug": "bytesized",
                          "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--sq0DrZfn--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://thepracticaldev.s3.amazonaws.com/uploads/organization/profile_image/865/652f7998-32a8-4fd9-85ca-dd697d2a9ee9.png",
                          "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--1Pt_ICL---/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://thepracticaldev.s3.amazonaws.com/uploads/organization/profile_image/865/652f7998-32a8-4fd9-85ca-dd697d2a9ee9.png"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Shell",
            "label": "curl (all articles)",
            "source": "curl https://dev.to/api/articles\n"
          },
          {
            "lang": "Shell",
            "label": "curl (user's articles)",
            "source": "curl https://dev.to/api/articles?username=ben\n"
          }
        ]
      },
      "post": {
        "summary": "Create a new article",
        "description": "This endpoint allows the client to create a new article.\n\n\"Articles\" are all the posts that users create on DEV that typically\nshow up in the feed. They can be a blog post, a discussion question,\na help thread etc. but is referred to as article within the code.\n\n### Rate limiting\n\nThere is a limit of 10 articles created each 30 seconds by the same user.\n\n### Additional resources\n\n- [Rails tests for Articles API](https://github.com/thepracticaldev/dev.to/blob/master/spec/requests/api/v0/articles_spec.rb)\n",
        "tags": [
          "articles"
        ],
        "requestBody": {
          "description": "Article to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ArticleCreate"
              },
              "examples": {
                "article-create-title-body": {
                  "$ref": "#/components/examples/ArticleCreateTitleBody"
                },
                "article-create-front-matter": {
                  "$ref": "#/components/examples/ArticleCreateFrontMatter"
                },
                "article-create-organization": {
                  "$ref": "#/components/examples/ArticleCreateOrganization"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "A newly created article",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ArticleShow"
                },
                "examples": {
                  "article-success": {
                    "$ref": "#/components/examples/ArticleShow"
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "description": "The URL of the new article",
                "schema": {
                  "type": "string",
                  "format": "url"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/APIError"
                },
                "examples": {
                  "error-bad-request": {
                    "$ref": "#/components/examples/ErrorBadRequest"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/APIError"
                },
                "examples": {
                  "error-unauthorized": {
                    "$ref": "#/components/examples/ErrorUnauthorized"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/APIError"
                },
                "examples": {
                  "error-unprocessable-entity": {
                    "$ref": "#/components/examples/ErrorUnprocessableEntity"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "oauth2": []
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "label": "curl",
            "source": "curl -X POST -H \"Content-Type: application/json\" \\\n  -H \"api-key: API_KEY\" \\\n  -d '{\"article\":{\"title\":\"Title\",\"body_markdown\":\"Body\",\"published\":false,\"tags\":[\"discuss\", \"javascript\"]}}' \\\n  https://dev.to/api/articles\n"
          },
          {
            "lang": "Shell",
            "label": "curl (with front matter)",
            "source": "curl -X POST -H \"Content-Type: application/json\" \\\n-H \"api-key: API_KEY\" \\\n-d '{\"article\":{\"body_markdown\":\"---\\ntitle:A sample article about...\\npublished:false\\n---\\n...\"}}' \\\nhttps://dev.to/api/articles\n"
          }
        ]
      }
    },
    "/articles/{id}": {
      "get": {
        "summary": "A published article",
        "description": "This endpoint allows the client to retrieve a single\npublished article given its `id`.\n\nResponses are cached for 5 minutes.\n",
        "tags": [
          "articles"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Id of the article",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 150589
          }
        ],
        "responses": {
          "200": {
            "description": "An article",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ArticleShow"
                },
                "examples": {
                  "article-success": {
                    "$ref": "#/components/examples/ArticleShow"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/APIError"
                },
                "examples": {
                  "article-not-found": {
                    "$ref": "#/components/examples/ErrorNotFound"
                  }
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Shell",
            "label": "curl",
            "source": "curl https://dev.to/api/articles/150589\n"
          }
        ]
      },
      "put": {
        "summary": "Update an existing article",
        "description": "This endpoint allows the client to updated an existing article.\n\n\"Articles\" are all the posts that users create on DEV that typically\nshow up in the feed. They can be a blog post, a discussion question,\na help thread etc. but is referred to as article within the code.\n\n### Rate limiting\n\nThere are no limits on the amount of updates.\n\n### Additional resources\n\n- [Rails tests for Articles API](https://github.com/thepracticaldev/dev.to/blob/master/spec/requests/api/v0/articles_spec.rb)\n",
        "tags": [
          "articles"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Id of the article",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 150589
          }
        ],
        "requestBody": {
          "description": "Article params to update.\n\n*Note: if the article contains a front matter in its body, its front\nmatter properties will still take precedence over any JSON equivalent\nparams, which means that the full body_markdown with the modified\nfront matter params needs to be provided for an update to be successful*\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ArticleUpdate"
              },
              "examples": {
                "article-update-title-body": {
                  "$ref": "#/components/examples/ArticleCreateTitleBody"
                },
                "article-update-front-matter": {
                  "$ref": "#/components/examples/ArticleCreateFrontMatter"
                },
                "article-update-organization": {
                  "$ref": "#/components/examples/ArticleCreateOrganization"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated article",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ArticleShow"
                },
                "examples": {
                  "article-success": {
                    "$ref": "#/components/examples/ArticleShow"
                  }
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/APIError"
                },
                "examples": {
                  "error-bad-request": {
                    "$ref": "#/components/examples/ErrorBadRequest"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/APIError"
                },
                "examples": {
                  "error-unauthorized": {
                    "$ref": "#/components/examples/ErrorUnauthorized"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/APIError"
                },
                "examples": {
                  "error-unprocessable-entity": {
                    "$ref": "#/components/examples/ErrorUnprocessableEntity"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "oauth2": []
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "label": "curl",
            "source": "curl -X PUT -H \"Content-Type: application/json\" \\\n  -H \"api-key: API_KEY\" \\\n  -d '{\"article\":{\"title\":\"Title\"}' \\\n  https://dev.to/api/articles/{id}\n"
          }
        ]
      }
    },
    "/articles/me": {
      "get": {
        "summary": "Authenticated user's articles",
        "description": "This endpoint allows the client to retrieve a list of its published articles.\n\n\"Articles\" are all the posts that users create on DEV that typically\nshow up in the feed. They can be a blog post, a discussion question,\na help thread etc. but is referred to as article within the code.\n\nPublished articles will be in reverse chronological publication order.\n\nIt will return published articles with pagination.\nBy default a page will contain `30` articles.\n",
        "tags": [
          "articles"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Pagination page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Page size (defaults to 30 with a maximum of 1000).",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 30
          }
        ],
        "responses": {
          "200": {
            "description": "A list of published articles",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ArticleMe"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "oauth2": []
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "label": "curl",
            "source": "curl -H \"api-key: API_KEY\" https://dev.to/api/articles/me\n"
          }
        ]
      }
    },
    "/articles/me/published": {
      "get": {
        "summary": "Authenticated user's published articles",
        "description": "This endpoint allows the client to retrieve a list of its published articles.\n\n\"Articles\" are all the posts that users create on DEV that typically\nshow up in the feed. They can be a blog post, a discussion question,\na help thread etc. but is referred to as article within the code.\n\nPublished articles will be in reverse chronological publication order.\n\nIt will return published articles with pagination.\nBy default a page will contain `30` articles.\n",
        "tags": [
          "articles"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Pagination page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Page size (defaults to 30 with a maximum of 1000).",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 30
          }
        ],
        "responses": {
          "200": {
            "description": "A list of published articles",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ArticleMe"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "oauth2": []
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "label": "curl",
            "source": "curl -H \"api-key: API_KEY\" https://dev.to/api/articles/me/published\n"
          }
        ]
      }
    },
    "/articles/me/unpublished": {
      "get": {
        "summary": "Authenticated user's unpublished articles",
        "description": "This endpoint allows the client to retrieve a list of its unpublished articles.\n\n\"Articles\" are all the posts that users create on DEV that typically\nshow up in the feed. They can be a blog post, a discussion question,\na help thread etc. but is referred to as article within the code.\n\nUnpublished articles will be in reverse chronological creation order.\n\nIt will return unpublished articles with pagination.\nBy default a page will contain `30` articles.\n",
        "tags": [
          "articles"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Pagination page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Page size (defaults to 30 with a maximum of 1000).",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 30
          }
        ],
        "responses": {
          "200": {
            "description": "A list of articles",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ArticleMe"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "oauth2": []
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "label": "curl",
            "source": "curl -H \"api-key: API_KEY\" https://dev.to/api/articles/me/unpublished\n"
          }
        ]
      }
    },
    "/articles/me/all": {
      "get": {
        "summary": "Authenticated user's all articles",
        "description": "This endpoint allows the client to retrieve a list of its articles.\n\n\"Articles\" are all the posts that users create on DEV that typically\nshow up in the feed. They can be a blog post, a discussion question,\na help thread etc. but is referred to as article within the code.\n\nIt will return both published and unpublished articles with pagination.\n\nUnpublished articles will be at the top of the list in reverse chronological creation order.\nPublished articles will follow in reverse chronological publication order.\n\nBy default a page will contain `30` articles.\n",
        "tags": [
          "articles"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Pagination page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Page size (defaults to 30 with a maximum of 1000).",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 30
          }
        ],
        "responses": {
          "200": {
            "description": "A list of articles",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ArticleMe"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "oauth2": []
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "label": "curl",
            "source": "curl -H \"api-key: API_KEY\" https://dev.to/api/articles/me/all\n"
          }
        ]
      }
    },
    "/webhooks": {
      "get": {
        "summary": "Webhooks",
        "description": "This endpoint allows the client to retrieve a list of webhooks they have\npreviously registered.\n\n\"Webhooks\" are used to register HTTP endpoints that will be called once a relevant event is\ntriggered inside the web application, events like `article_created`, `article_updated`.\n\nIt will return all webhooks, without pagination.\n",
        "tags": [
          "webhooks"
        ],
        "responses": {
          "200": {
            "description": "A list of webhooks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WebhookIndex"
                  }
                },
                "examples": {
                  "webhooks-success": {
                    "summary": "Successful response",
                    "value": [
                      {
                        "type_of": "webhook_endpoint",
                        "id": 1,
                        "source": "DEV",
                        "target_url": "https://example.com/webhooks/webhook1",
                        "events": [
                          "article_created"
                        ],
                        "created_at": "2019-09-02T09:47:39.230Z"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "oauth2": []
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "label": "curl",
            "source": "curl -H \"api-key: API_KEY\" https://dev.to/api/webhooks\n"
          }
        ]
      },
      "post": {
        "summary": "Create a new webhook",
        "description": "This endpoint allows the client to create a new webhook.\n\n\"Webhooks\" are used to register HTTP endpoints that will be called once a relevant event is\ntriggered inside the web application, events like `article_created`, `article_updated`.\n",
        "tags": [
          "webhooks"
        ],
        "requestBody": {
          "description": "Webhook to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookCreate"
              },
              "examples": {
                "webhook-create": {
                  "$ref": "#/components/examples/WebhookCreate"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "A newly created webhook",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/WebhookShow"
                },
                "examples": {
                  "webhook-success": {
                    "$ref": "#/components/examples/WebhookShow"
                  }
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/APIError"
                },
                "examples": {
                  "error-bad-request": {
                    "$ref": "#/components/examples/ErrorBadRequest"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/APIError"
                },
                "examples": {
                  "error-unauthorized": {
                    "$ref": "#/components/examples/ErrorUnauthorized"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/APIError"
                },
                "examples": {
                  "error-unprocessable-entity": {
                    "$ref": "#/components/examples/ErrorUnprocessableEntity"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "oauth2": []
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "label": "curl",
            "source": "curl -X POST -H \"Content-Type: application/json\" \\\n  -H \"api-key: API_KEY\" \\\n  -d '{\"webhook_endpoint\":{\"target_url\":\"https://example.org/webhooks/webhook1\",\"source\":\"DEV\",\"events\":[\"article_created\"]}}' \\\n  https://dev.to/api/webhooks\n"
          }
        ]
      }
    },
    "/webhooks/{id}": {
      "get": {
        "summary": "A webhook endpoint",
        "description": "This endpoint allows the client to retrieve a single\nwebhook given its `id`.\n",
        "tags": [
          "webhooks"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Id of the webhook",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 123
          }
        ],
        "responses": {
          "200": {
            "description": "A webhook endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/WebhookShow"
                },
                "examples": {
                  "webhook-success": {
                    "$ref": "#/components/examples/WebhookShow"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/APIError"
                },
                "examples": {
                  "article-unauthorized": {
                    "$ref": "#/components/examples/ErrorUnauthorized"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/APIError"
                },
                "examples": {
                  "article-not-found": {
                    "$ref": "#/components/examples/ErrorNotFound"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "oauth2": []
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "label": "curl",
            "source": "curl https://dev.to/api/webhooks/123\n"
          }
        ]
      },
      "delete": {
        "summary": "A webhook endpoint",
        "description": "This endpoint allows the client to delete a single\nwebhook given its `id`.\n",
        "tags": [
          "webhooks"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Id of the webhook",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 123
          }
        ],
        "responses": {
          "204": {
            "description": "A successful deletion"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/APIError"
                },
                "examples": {
                  "article-unauthorized": {
                    "$ref": "#/components/examples/ErrorUnauthorized"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/APIError"
                },
                "examples": {
                  "article-not-found": {
                    "$ref": "#/components/examples/ErrorNotFound"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "oauth2": []
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "label": "curl",
            "source": "curl -X DELETE \\\n  -H \"api-key: API_KEY\" \\\n  https://dev.to/api/webhooks/1\n"
          }
        ]
      }
    }
  }
}