/**
 * DEV API
 * Access DEV articles, comments and other resources via API  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 0.5.7
 * Contact: yo@dev.to
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { APIError } from '../model/aPIError';
import { ArticleCreate } from '../model/articleCreate';
import { ArticleIndex } from '../model/articleIndex';
import { ArticleMe } from '../model/articleMe';
import { ArticleShow } from '../model/articleShow';
import { ArticleUpdate } from '../model/articleUpdate';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ArticlesService {

    protected basePath = 'https://dev.to/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Published articles
     * This endpoint allows the client to retrieve a list of articles.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  By default it will return featured, published articles ordered by descending popularity.  Each page will contain &#x60;30&#x60; articles.  Responses, according to the combination of params, are cached for 24 hours. 
     * @param page Pagination page.  This param can be used in conjuction with all other params (except when asking for fresh and rising articles by themselves). 
     * @param tag Adding this parameter will return articles that contain the requested tag.  This param can be used by itself, with &#x60;page&#x60; or with &#x60;top&#x60;. 
     * @param username Adding this parameter will return articles belonging to a User or Organization ordered by descending &#x60;published_at&#x60;.  If &#x60;state&#x3D;all&#x60; the number of items returned will be &#x60;1000&#x60; instead of the default &#x60;30&#x60;.  This param can be used by itself or only with &#x60;page&#x60; and &#x60;state&#x60;. 
     * @param state Adding this will allow the client to check which articles are fresh or rising.  If &#x60;state&#x3D;fresh&#x60; the server will return published fresh articles. If &#x60;state&#x3D;rising&#x60; the server will return published rising articles.  This param can only be used by itself or with &#x60;username&#x60; if set to &#x60;all&#x60;. 
     * @param top Adding this will allow the client to return the most popular articles in the last &#x60;N&#x60; days.  &#x60;top&#x60; indicates the number of days since publication of the articles returned.  This param can only be used by itself or with &#x60;tag&#x60;. 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public articlesGet(page?: number, tag?: string, username?: string, state?: string, top?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<ArticleIndex>>;
    public articlesGet(page?: number, tag?: string, username?: string, state?: string, top?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ArticleIndex>>>;
    public articlesGet(page?: number, tag?: string, username?: string, state?: string, top?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ArticleIndex>>>;
    public articlesGet(page?: number, tag?: string, username?: string, state?: string, top?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {






        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (tag !== undefined && tag !== null) {
            queryParameters = queryParameters.set('tag', <any>tag);
        }
        if (username !== undefined && username !== null) {
            queryParameters = queryParameters.set('username', <any>username);
        }
        if (state !== undefined && state !== null) {
            queryParameters = queryParameters.set('state', <any>state);
        }
        if (top !== undefined && top !== null) {
            queryParameters = queryParameters.set('top', <any>top);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<ArticleIndex>>(`${this.basePath}/articles`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * A published article
     * This endpoint allows the client to retrieve a single published article given its &#x60;id&#x60;.  Responses are cached for 5 minutes. 
     * @param id Id of the article
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public articlesIdGet(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public articlesIdGet(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public articlesIdGet(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public articlesIdGet(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling articlesIdGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/articles/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update an existing article
     * This endpoint allows the client to updated an existing article.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  ### Rate limiting  There are no limits on the amount of updates.  ### Additional resources  - [Rails tests for Articles API](https://github.com/thepracticaldev/dev.to/blob/master/spec/requests/api/v0/articles_spec.rb) 
     * @param id Id of the article
     * @param body Article params to update.

*Note: if the article contains a front matter in its body, its front
matter properties will still take precedence over any JSON equivalent
params, which means that the full body_markdown with the modified
front matter params needs to be provided for an update to be successful*

     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public articlesIdPut(id: number, body?: ArticleUpdate, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public articlesIdPut(id: number, body?: ArticleUpdate, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public articlesIdPut(id: number, body?: ArticleUpdate, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public articlesIdPut(id: number, body?: ArticleUpdate, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling articlesIdPut.');
        }


        let headers = this.defaultHeaders;

        // authentication (api_key) required
        if (this.configuration.apiKeys["api-key"]) {
            headers = headers.set('api-key', this.configuration.apiKeys["api-key"]);
        }

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/articles/${encodeURIComponent(String(id))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Authenticated user&#x27;s all articles
     * This endpoint allows the client to retrieve a list of its articles.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  It will return both published and unpublished articles with pagination.  Unpublished articles will be at the top of the list in reverse chronological creation order. Published articles will follow in reverse chronological publication order.  By default a page will contain &#x60;30&#x60; articles. 
     * @param page Pagination page.
     * @param perPage Page size (defaults to 30 with a maximum of 1000).
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public articlesMeAllGet(page?: number, perPage?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<ArticleMe>>;
    public articlesMeAllGet(page?: number, perPage?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ArticleMe>>>;
    public articlesMeAllGet(page?: number, perPage?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ArticleMe>>>;
    public articlesMeAllGet(page?: number, perPage?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (perPage !== undefined && perPage !== null) {
            queryParameters = queryParameters.set('per_page', <any>perPage);
        }

        let headers = this.defaultHeaders;

        // authentication (api_key) required
        if (this.configuration.apiKeys["api-key"]) {
            headers = headers.set('api-key', this.configuration.apiKeys["api-key"]);
        }

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<ArticleMe>>(`${this.basePath}/articles/me/all`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Authenticated user&#x27;s articles
     * This endpoint allows the client to retrieve a list of its published articles.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Published articles will be in reverse chronological publication order.  It will return published articles with pagination. By default a page will contain &#x60;30&#x60; articles. 
     * @param page Pagination page.
     * @param perPage Page size (defaults to 30 with a maximum of 1000).
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public articlesMeGet(page?: number, perPage?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<ArticleMe>>;
    public articlesMeGet(page?: number, perPage?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ArticleMe>>>;
    public articlesMeGet(page?: number, perPage?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ArticleMe>>>;
    public articlesMeGet(page?: number, perPage?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (perPage !== undefined && perPage !== null) {
            queryParameters = queryParameters.set('per_page', <any>perPage);
        }

        let headers = this.defaultHeaders;

        // authentication (api_key) required
        if (this.configuration.apiKeys["api-key"]) {
            headers = headers.set('api-key', this.configuration.apiKeys["api-key"]);
        }

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<ArticleMe>>(`${this.basePath}/articles/me`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Authenticated user&#x27;s published articles
     * This endpoint allows the client to retrieve a list of its published articles.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Published articles will be in reverse chronological publication order.  It will return published articles with pagination. By default a page will contain &#x60;30&#x60; articles. 
     * @param page Pagination page.
     * @param perPage Page size (defaults to 30 with a maximum of 1000).
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public articlesMePublishedGet(page?: number, perPage?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<ArticleMe>>;
    public articlesMePublishedGet(page?: number, perPage?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ArticleMe>>>;
    public articlesMePublishedGet(page?: number, perPage?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ArticleMe>>>;
    public articlesMePublishedGet(page?: number, perPage?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (perPage !== undefined && perPage !== null) {
            queryParameters = queryParameters.set('per_page', <any>perPage);
        }

        let headers = this.defaultHeaders;

        // authentication (api_key) required
        if (this.configuration.apiKeys["api-key"]) {
            headers = headers.set('api-key', this.configuration.apiKeys["api-key"]);
        }

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<ArticleMe>>(`${this.basePath}/articles/me/published`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Authenticated user&#x27;s unpublished articles
     * This endpoint allows the client to retrieve a list of its unpublished articles.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Unpublished articles will be in reverse chronological creation order.  It will return unpublished articles with pagination. By default a page will contain &#x60;30&#x60; articles. 
     * @param page Pagination page.
     * @param perPage Page size (defaults to 30 with a maximum of 1000).
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public articlesMeUnpublishedGet(page?: number, perPage?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<ArticleMe>>;
    public articlesMeUnpublishedGet(page?: number, perPage?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ArticleMe>>>;
    public articlesMeUnpublishedGet(page?: number, perPage?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ArticleMe>>>;
    public articlesMeUnpublishedGet(page?: number, perPage?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (perPage !== undefined && perPage !== null) {
            queryParameters = queryParameters.set('per_page', <any>perPage);
        }

        let headers = this.defaultHeaders;

        // authentication (api_key) required
        if (this.configuration.apiKeys["api-key"]) {
            headers = headers.set('api-key', this.configuration.apiKeys["api-key"]);
        }

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<ArticleMe>>(`${this.basePath}/articles/me/unpublished`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create a new article
     * This endpoint allows the client to create a new article.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  ### Rate limiting  There is a limit of 10 articles created each 30 seconds by the same user.  ### Additional resources  - [Rails tests for Articles API](https://github.com/thepracticaldev/dev.to/blob/master/spec/requests/api/v0/articles_spec.rb) 
     * @param body Article to create
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public articlesPost(body?: ArticleCreate, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public articlesPost(body?: ArticleCreate, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public articlesPost(body?: ArticleCreate, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public articlesPost(body?: ArticleCreate, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (api_key) required
        if (this.configuration.apiKeys["api-key"]) {
            headers = headers.set('api-key', this.configuration.apiKeys["api-key"]);
        }

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/articles`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
